#+startup:fold -*- buffer-read-only:t  -*- 
# note: everything below is work in progress.
# if you notice smth missing, don't ask permissions, go ahead, and fix it
* ------------------------------------------------------------------------------
* [[file:news.org][News]]                                                                       
* [[file:build_instructions.org][installation and build]]
* configuration                                                              
the folowing assumes that you read instructions on MIDAS website: 

https://daq00.triumf.ca/MidasWiki/index.php/Quickstart_Linux#Installation                                            

** declare working directory as $MU2E_DAQ_DIR and install config files       

#+begin_src
export   MU2E_DAQ_DIR=$PWD
cp  $SPACK_ENV/frontends/scripts/setup_daq.sh                  $MU2E_DAQ_DIR/.
mkdir -p $MU2E_DAQ_DIR/config/scripts
cp  $SPACK_ENV/frontends/scripts/get_next_run_number.py        $MU2E_DAQ_DIR/config/scripts/.
cp  $SPACK_ENV/frontends/scripts/start_node_frontend.sh        $MU2E_DAQ_DIR/config/scripts/.
cp  $SPACK_ENV/frontends/scripts/test_seq.sh                   $MU2E_DAQ_DIR/config/scripts/.
#+end_src

- copy elog.json and runinfodb.json from ~mu2etrk/backup/ to ./config
- decide on the location of ODB. THe tracker group keeps ODB instances
  in ~test_stand/experiments

-  name your experiment, and create the .exptab file:
- the .exptab file looks like this (details - on MIDAS website):
#+begin_src
# expt name     ODB location                                user name
test_025     /home/mu2etrk/test_stand/experiments/test_025  mu2etrk
#+end_src

- finally, edit the setup_daq.sh to define MIDAS env vars.
- The first line in the example below doesn't need to be changed
#+begin_src
  export          MIDASSYS=$SPACK_VIEW
  export MIDAS_SERVER_HOST=mu2edaq22-ctrl.fnal.gov
  export   MIDAS_EXPT_NAME=test_025
  export      MIDAS_EXPTAB=$MIDAS_DAQ_DIR/config/midas/$MIDAS_EXPT_NAME.exptab
#+end_src

** configure MIDAS                                                           

- 2.1: run odbedit to setup the initial ODB 
- 2.2: start mhttpd 
- 2.3: run odbedit again to redefine the '/Webserver/localhost port' 
- 2.4: restart mhttpd to listen to the right port   (these steps are defined 
- 2.5: load the Mu2e configuration tree - it should show up as a top-level directory called Mu2e:
-      run odbedit, create a top-level "Mu2e" subdirectory":
-      mkdir Mu2e
-      cd Mu2e
-      load frontends/odb/Mu2e/Mu2e.json

- when starting mhttpd, record the shell process ID - the TRACE file will have the name /tmp/trace_file.10003
- sequencer: configure '/Sequencer/State/Path'
  by default, sequencer scripts show up in $MIDAQ_EXPT_DIR/userfiles/sequencer
  copy frontends/sequencer/get_next_run_number.msl to $MIDAQ_EXPT_DIR/userfiles/sequencer
  if path is defined, check experimentally where to copy
- mlogger " configure '/Logger/Data dir'
- elog: configure '/Elog/URL', '/Elog/External Elog'
#+begin_src
mhttpd -D
echo $$
#+end_src
** configure postgres                                                        
- make sure you have $MU2E_DAQ_DIR/config/runinfodb.json with the PG configuration 
- outside the EC cluster 
#+begin_src
- ssh -f -KX -N -L 5434:daq14:5434 -J mu2etrk@daq-gateway mu2etrk@daq14
#+end_src
- after that, direct the local client (via config/runinfodb.json) to daq14:5434
** configure ROOT interface                                                  
#+begin_src
cp $SPACK_ENV/frontends/scripts/.rootrc     $MU2E_DAQ_DIR/.
cp $SPACK_ENV/frontends/scripts/rootlogon.C $MU2E_DAQ_DIR/.
#+end_src
** configure ELOG                                                            
   file:elog.org::/configuration/
* ARTDAQ                                                                     
** artdaq repo: https://github.com/art-daq/artdaq
** mu2e-45544: artdaq intro by Eric:                                         
   https://mu2e-docdb.fnal.gov/cgi-bin/sso/RetrieveFile?docid=45544&filename=ArtdaqOverview.pdf
** artdaq::Fragment                                                          
   - fragment type: tells the type of the data stored in the fragment
   - fragment ID  : in essense, the fragment generator type
     - a single generator can write out fragments of different types
** transfer plugins                                                          
- see file:../../artdaq/artdaq/TransferPlugins   (capitalization important)                             
-  "Autodetect" - in local case, seems to default to Shmem (?)
-  "Bundle"     - in a local case, seems to default to "TCPSocket"
-  "Shmem"
-  "TCPSocket"
-  "RTIDDS"
-  "Null"
* CFO                                                                        
** mu2e-pcie-utils interface                                                 
   file:../../mu2e_pcie_utils/cfoInterfaceLib/CFO.h
   file:../../mu2e_pcie_utils/cfoInterfaceLib/CFO_Registers.h
   file:../../mu2e_pcie_utils/cfoInterfaceLib/CFO_Registers.cpp

** otsdaq CFO macros                                                         
- defined in file:../../otsdaq_mu2e/otsdaq-mu2e/FEInterfaces/CFOFrontEndInterface_interface.cc
*** CFOReset                                                                 
    file:../../otsdaq_mu2e/otsdaq-mu2e/FEInterfaces/CFOFrontEndInterface_interface.cc::/CFOReset/
#+begin_src
   CFO* cfo = .... ;
   cfo->SoftReset();
#+end_src
*** TODO CFOHalt           
    file:../../otsdaq_mu2e/otsdaq-mu2e/FEInterfaces/CFOFrontEndInterface_interface.cc::/CFOHalt/
-- why halting and disabling the beam "off" mode is the same ?
    file:../../mu2e_pcie_utils/cfoInterfaceLib/CFO_Registers.cpp::/DisableBeamOffMode/
#+begin_src
   CFO* cfo = .... ;
   cfo->DisableBeamOffMode(CFOLib::CFO_Link_ID::CFO_Link_ALL);
#+end_src
*** WriteCFO
*** CFO Write --> CFOFrontEndInterface::WriteCFO
*** LoopbackTest                                                             
    file:../../otsdaq_mu2e/otsdaq-mu2e/FEInterfaces/CFOFrontEndInterface_interface.cc::/LoopbackTest/

*** TestMarker               
    file:../../otsdaq_mu2e/otsdaq-mu2e/FEInterfaces/CFOFrontEndInterface_interface.cc::/TestMarker/
- calls once function 'measureDelay' : 
*** "CFO Read" --> CFOFrontEndInterface::ReadCFO
*** ResetRunplan
*** CompileRunplan
*** SetRunplan
*** LaunchRunplan
*** ConfigureForTimingChain
* [[file:dtc.org][DTC]]
* [[file:elog.org][elog]]
* runinfo database (PostgreSQL)                                              
* [[file:firmware.org][firmware]]
* [[file:rocs.org][ROCs]]
* [[https://mu2e-docdb.fnal.gov/cgi-bin/sso/ShowDocument?docid=19095][mu2e-19095]] : Mu2e beam timing
* [[https://mu2e-docdb.fnal.gov/cgi-bin/sso/RetrieveFile?docid=37376&filename=20220922_DAQNodes.pdf][mu2e-37376]] : DAQ node configuration in the DAQ room                        
* [[file:ots.org][ots]]                                                                        
* [[file:trace.org][TRACE]]
* [[file:code_repositories.org][code repositories]]                                                        
* frontends                                                                  
** emulated CFO frontend                                                     
#+begin_src   normal startup printout                                        
mu2etrk@mu2edaq22:~/test_stand/pasha_031>cfo_emu_frontend 
11-30 10:27:29.959873                           MetricManager:31     INFO MetricManager(): MetricManager CONSTRUCTOR
Frontend name          :     cfo_emu_fe
Event buffer size      :     100000
User max event size    :     10000
User max frag. size    :     50000
# of events per buffer :     10

Connect to experiment test_025...
OK
Init hardware...
11-30 10:27:29.975023                       cfo_emu_frontend:112    DEBUG frontend_init(): h_dtc:264936
11-30 10:27:29.975048                       cfo_emu_frontend:116    DEBUG frontend_init(): active_run_conf:roctower hDB : 1 _h_cfo: 264112 cfo_enabled: 1_pcie_addr: 0
11-30 10:27:29.975055                       cfo_emu_frontend:151    DEBUG frontend_init(): END
Connecting EmulatedCFO:cfo...11-30 10:27:29.975177                          cfo_emu_driver:60    DEBUG cfo_emu_driver_init(...): START channels:1
11-30 10:27:29.977807                           DTC_Registers:38     INFO DTC_Registers(...): CONSTRUCTOR
11-30 10:27:29.977842                           DTC_Registers:87     INFO SetSimMode(...): Initializing DTC device, sim mode is NoCFO for uid = DTC0, deviceIndex = 0
11-30 10:27:31.015776                          DTC_Registers:100     INFO SetSimMode(...): DTC DTC0: SKIPPING Initializing device
11-30 10:27:31.015837                                 DTC.cpp:38     INFO DTC(...): DTC DTC0: CONSTRUCTOR
11-30 10:27:31.015936                          cfo_emu_driver:90    DEBUG cfo_emu_driver_init(...): START ew_length:1000 nevents:66 first_tx:0
OK
[cfo_emu_fe,INFO] Slow control equipment initialized
#+end_src
** TODO external CFO frontend                                                
- to be completed
** [[file:tfm_launch_fe.org][tfm_launch_fe]] : trigger farm manager (TFM) launching frontend
** [[file:../node_frontend][node_frontend]] : slow monitoring frontend, monitors DTC's, ROCs, ARTDAQ one per node
* [[file:odb.org][ODB]]                       
* debugging frontends                                                        
- build it (today in EC - on daq13)
- open a new shell , initialize the environment (run setup_daq.sh)
- enable TRACE "slow" printouts, start frontend , see what it does
- if that is not enough, run it under debuggger as 'frontend -d'
* SCREEN cheat sheet                                                         
#+begin_src 
screen -ls                 # see all screen sessions
screen -r 11882.tfm        # connect to one 
Ctrl-a d                   # disconnect
#+end_src
more details: https://www.geeksforgeeks.org/screen-command-in-linux-with-examples/
* vivado cheat sheet                                                         
#+begin_src 
source /home/xilinx/Vivado_Lab/2021.2/settings64.sh
vivado_lab 
#+end_src

- DAQ22:
- CFO(pcie index=0) JTAG: localhost/xilinx_tcf/Xilinx/00001b8d782001
- DTC(pcie index=1) JTAG: localhost/xilinx_tcf/Xilinx/00001b8d75ad01
- hw_ila_16 (cfo_counters): 
* ------------------------------------------------------------------------------
* additional documentation on MIDAS: file:midas.org
* ------------------------------------------------------------------------------
