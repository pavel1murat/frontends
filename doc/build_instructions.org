* ------------------------------------------------------------------------------
* installation under spack - hints
- do the mu2e spack thing - see https://github.com/Mu2e/daq-operations/wiki/Getting-Started-With-Spack
- cd to the top/spack-repos
#+begin_src
- git clone https://github.com/pavel1murat/spack_packages murat-spack
  spack repo add murat-spack

  # keep using gcc 13.1.0 , problems otherwise

  spack env create   midas_env       # choose your own name
  spack env activate midas_env
  spack add py-psycopg2              # python interface to postgresql

  spack add root@6.30.06%gcc@13.1.0+postgres+root7+webgui cxxstd=20
  spack add art-root-io@1.13.06%gcc@13.1.0 cxxstd=20

  # with the latest version of artdaq, cant read the produced files in the offline
  spack add artdaq@v3_13_01%gcc@13.1.0 
  spack add otsdaq@develop%gcc@13.1.0

  spack add otsdaq-mu2e-tracker@develop%gcc@13.1.0
  spack add midas@3.01.00%gcc@13.1.0~postgresql~sqlite~opencv
  spack add tfm@main%gcc@13.1.0
  spack add frontends@main%gcc@13.1.0
  spack add mu2e-pcie-utils@develop%gcc@13.1.0
  spack add kinkal@3.1.3

  spack develop mu2e-pcie-utils@develop%gcc@13.1.0
  spack develop tfm@main%gcc@13.1.0
  spack develop midas@3.01.00%gcc@13.1.0~postgresql~sqlite~opencv
  spack develop otsdaq-mu2e-tracker@develop%gcc@13.1.0
  spack develop frontends@main%gcc@13.1.0
  
  spack add     emacs@29.3%gcc@13.1.0+X
  
  spack concretize -f
  spack install
#+end_src
* ROOT interface to mu2e_pcie_utils    validated <2024-11-20 Wed>         
- ROOT interface library is not available by default, you have to build it
- mu2e-pcie-utils depends on artdaq-core-mu2e
#+begin_src
export BUILD_ROOT_INTERFACE=1
spack     add canvas-root-io@1.13.06%gcc@13.1.0 cxxstd=20
spack     add mu2e-pcie-utils@develop%gcc@13.1.0

# spack develop mu2e_pcie_utils@develop%gcc@13.1.0
spack concretize -f
spack install mu2e-pcie-utils@develop%gcc@13.1.0
#+end_src
- the installation puts the mu2e-pcie-include files under $SPACK_VIEW/include, so the rootlogon.C needs to have the following
#+begin_src
{
                                // the line below tells rootcling where to look 
				// for include files

  gInterpreter->AddIncludePath(Form("%s/otsdaq-mu2e-tracker",gSystem->Getenv("SPACK_ENV" )));
  gInterpreter->AddIncludePath(Form("%s/include"            ,gSystem->Getenv("SPACK_VIEW" )));
  gInterpreter->AddIncludePath(Form("%s/include/root"       ,gSystem->Getenv("SPACK_VIEW")));
}
#+end_src
after that, you can do this:
#+begin_src
root.exe
root [0] #include "dtcInterface/DTC.hh"
root [1] DTCLib::DTC dtc(DTCLib::DTC_SimMode_NoCFO,-1,0x1,"");
06-18 17:41:07.271940                      DTC_Registers     INFO DTC_Registers(...): Sim Mode is NoCFO
06-18 17:41:07.271997                      DTC_Registers     INFO DTC_Registers(...): DTC ID is 1
06-18 17:41:07.272011                      DTC_Registers     INFO SetSimMode(...): Initializing device, sim mode is NoCFO
06-18 17:41:07.278490                      DTC_Registers     INFO SetSimMode(...): SKIPPING Initializing device
06-18 17:41:07.283713                            DTC.cpp     INFO DTC(...): CONSTRUCTOR
root [1] mu2edev* dev = dtc.GetDevice();
root [2]   uint32_t res; 
root [3]   int      rc;
root [4]   rc = dev->read_register(0x9100,100,&res); printf("0x9100: DTC status       : 0x%08x\n",res); // expect: 0x40808404
0x9100: DTC status       : 0x40808404
#+end_src

*Comments*

- for examples, see https://github.com/Mu2e/otsdaq_mu2e_tracker/blob/develop/scripts/daq_scripts.C , 
  or any other .C script in that area
- every script should have the following line on top"
#+begin_src
#define __CLING__ 1
#+end_src
- because of the complexity of the C++ code, ROOT needs to be restarted every time you reload your script
* ------------------------------------------------------------------------------
* back to [[file:frontends.org][frontends]]
* ------------------------------------------------------------------------------
