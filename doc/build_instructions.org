* ------------------------------------------------------------------------------
* installation under spack - hints
- do the mu2e spack thing
- cd to the top/spack-repos
- git clone https://github.com/pavel1murat/spack_packages murat-spack
  spack repo add murat-spack

  spack rm  artdaq-core-mu2e@v3_02_00
  spack add artdaq-core-mu2e@develop%gcc@13.1.0

  spack rm  artdaq-mu2e@v3_02_00
  spack add artdaq-mu2e@develop%gcc@13.1.0

  spack rm  mu2e-pcie-utils@v3_02_00%gcc@13.1.0
  spack add mu2e-pcie-utils@develop%gcc@13.1.0

  spack rm  otsdaq-mu2e@v3_02_00%gcc@13.1.0
  spack add otsdaq-mu2e@develop%gcc@13.1.0
  
  spack add emacs@29.3%gcc@13.1.0+X toolkit=athena
  spack add cairo+X+fc+ft
  
  spack add frontends@main%gcc@13.1.0
  spack add tfm@main%gcc@13.1.0
  spack add midas@develop%gcc@13.1.0~sqlite
  spack add otsdaq-mu2e-tracker@develop%gcc@13.1.0

  spack develop frontends@main%gcc@13.1.0
  spack develop tfm@main%gcc@13.1.0
  spack develop midas@develop%gcc@13.1.0~sqlite
  spack develop otsdaq-mu2e-tracker@develop%gcc@13.1.0
  
  spack add root@6.30.06%gcc@13.1.0+root7+webgui+postgres

  spack concretize -f
  spack install
 ... and as always , cairo...
 
* installation and build instructions, validated <2024-02-13 Mon>            

  OTSDAQ bundle to use 
  - version   : v2_08_00   
  - qualifiers: e28_s128_debug

  - all available OTSDAQ bundles: https://scisoft.fnal.gov/scisoft/packages/otsdaq/

  - the build procedure itself:
    1) go to https://github.com/pavel1murat/frontends/tree/main/scripts/mu2e_install_daq.sh
    2) convert the page to raw format (click on the "raw" button), wget the resulting raw URL (the URL will have an odd ending)

#+begin_src 
  wget -O mu2e_install_daq.sh  <raw-URL>      # see example below
  source mu2e_install_daq.sh work_area partition [otsdaq_bundle] [qualifiers]
#+end_src 

  - work_area    : name of the work area, to be created in the current directory 
  - partition    : not used anywhere else, use 10 to begin with
  - otsdaq_bundle: version of the OTSDAQ bundle, see above 
  - qualifiers   : build qualifiers, see above

An example follows.
#+begin_src 
  wget -O mu2e_install_daq.sh https://raw.githubusercontent.com/pavel1murat/frontends/main/mu2e_install_daq.sh?token=GHSAT0AAAAAAB5R6WEFJZB7JMSKCUB3OHKMZKAOHMA
  source mu2e_install_daq.sh pasha_001 8 v2_07_00 e28_s126_prof
#+end_src

here 'pasha_001' is the name of the created work area

- if there is a need to pull locally more repos, 
  - cd to $MRB_SOURCE,  pull needed repos, cd back to 'pasha_001'
  - recompile:
#+begin_src
mrb uc
mrbsetenv
mrb b
#+end_src
* ROOT interface to mu2e_pcie_utils    validated <2023-07-19 Wed>            
- If you got here, you already have built the OTS libraries
- ROOT interface library is not available by default, you have to build it
#+begin_src
cd srcs
git clone https://github.com/mu2e/mu2e_pcie_utils
cd mu2e_pcie_utils
git checkout pasha
cd ../..
export BUILD_ROOT_INTERFACE=1
mrb b
#+end_src
after that, you can do the following:
#+begin_src
root.exe
root [0] DTCLib::DTC dtc(DTCLib::DTC_SimMode_NoCFO,-1,0x1,"");
06-18 17:41:07.271940                      DTC_Registers     INFO DTC_Registers(...): Sim Mode is NoCFO
06-18 17:41:07.271997                      DTC_Registers     INFO DTC_Registers(...): DTC ID is 1
06-18 17:41:07.272011                      DTC_Registers     INFO SetSimMode(...): Initializing device, sim mode is NoCFO
06-18 17:41:07.278490                      DTC_Registers     INFO SetSimMode(...): SKIPPING Initializing device
06-18 17:41:07.283713                            DTC.cpp     INFO DTC(...): CONSTRUCTOR
root [1] mu2edev* dev = dtc.GetDevice();
root [2]   uint32_t res; 
root [3]   int      rc;
root [4]   rc = dev->read_register(0x9100,100,&res); printf("0x9100: DTC status       : 0x%08x\n",res); // expect: 0x40808404
0x9100: DTC status       : 0x40808404
#+end_src

*Comments*

- for examples, see https://github.com/Mu2e/otsdaq_mu2e_tracker/blob/pasha/scripts/test_buffer_async.C , 
  or any other .C script in that area
- every script should have the following line on top"
#+begin_src
#define __CLING__ 1
#+end_src
- because of the complexity of the C++ code, ROOT needs to be restarted every time you reload your script

* ------------------------------------------------------------------------------
* back to [[file:frontends.org][frontends]]
* ------------------------------------------------------------------------------
